<?php

namespace Fisha\OrderFlow\Service\Processor\Refund\Transaction;

use Fisha\OrderFlow\Exception\Processor\ProcessFailedStatusException;
use Fisha\OrderFlow\Model\Api\Response\OrderApiStatus;
use Fisha\OrderFlow\Model\Processor\CommonLogic;
use Fisha\OrderFlow\Service\Order\MatchRefundedItemsService;
use Fisha\OrderFlow\Service\Order\Refund;
use Fisha\OrderFlow\Model\Processor\Result;
use Fisha\OrderFlow\Service\Api\Adapter\Inventory\GetOrderApiStatus;
use Fisha\OrderFlow\Service\Order\ResetOrder;
use Fisha\OrderFlow\Service\Processor\Refund\Transaction;
use Magento\Framework\Exception\CouldNotSaveException;
use Magento\Sales\Api\Data\CreditmemoCreationArgumentsInterface;
use Magento\Sales\Model\Order;
use Magento\Sales\Api\Data\CreditmemoCreationArgumentsInterfaceFactory;

class Partially extends Transaction
{
    /**
     * @var GetOrderApiStatus
     */
    protected GetOrderApiStatus $getOrderApiStatus;
    /**
     * @var MatchRefundedItemsService
     */
    protected MatchRefundedItemsService $matchRefundedItemsService;
    /**
     * @var CreditmemoCreationArgumentsInterfaceFactory
     */
    protected $argumentsFactory;

    /**
     * Partially constructor.
     *
     * @param CommonLogic $commonLogic
     * @param GetOrderApiStatus $getOrderApiStatus
     * @param ResetOrder $resetOrder
     * @param Refund $refundOrderService
     * @param CreditmemoCreationArgumentsInterfaceFactory $argumentsFactory
     * @param MatchRefundedItemsService $matchRefundedItemsService
     */
    public function __construct(
        CommonLogic $commonLogic,
        GetOrderApiStatus $getOrderApiStatus,
        ResetOrder $resetOrder,
        Refund $refundOrderService,
        CreditmemoCreationArgumentsInterfaceFactory $argumentsFactory,
        MatchRefundedItemsService $matchRefundedItemsService
    ) {
        parent::__construct($commonLogic, $resetOrder, $refundOrderService);
        $this->getOrderApiStatus         = $getOrderApiStatus;
        $this->matchRefundedItemsService = $matchRefundedItemsService;
        $this->argumentsFactory = $argumentsFactory;
    }

    /**
     * @param Order $order
     * @param array $items
     * @param CreditmemoCreationArgumentsInterface|null $arguments
     * @return Result
     */
    protected function processRefund(Order $order, array $items = [], CreditmemoCreationArgumentsInterface $arguments = null)
    {
        $result         = $this->createResult();
        $orderApiStatus = $this->getOrderApiStatus->execute($order);
        if (!$orderApiStatus->getStatus()) {
            $this->throwRestartException("Can't retrieve order Status via INV API. Order incrementID: {$order->getIncrementId()}");
        }

        if ($orderApiStatus->hasCanceledItems()) {
            $items = $this->matchCancelledItems($order, $orderApiStatus);
            /** @var CreditmemoCreationArgumentsInterface $arguments */
            $arguments      = $this->argumentsFactory->create();
            // Do not refund shipping
            $arguments->setShippingAmount(0);
            $result = parent::processRefund($order, $items, $arguments); // TODO: Change the autogenerated stub
        } else {
            $this->throwFailedStatusException($order, "No refund Items received from InvApi. Check Api logs");
        }

        return $result;
    }

    /**
     * @param Order $order
     * @param OrderApiStatus $orderApiStatus
     * @return array
     */
    protected function matchCancelledItems(Order $order, OrderApiStatus $orderApiStatus)
    {
        $items = [];

        try {
            $items = $this->matchRefundedItemsService->execute($order, $orderApiStatus->getCanceledItems());
        } catch (ProcessFailedStatusException $e) {
            $this->throwFailedStatusException($order, $e->getMessage());
        }
        return $items;
    }
}
